// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadPickfirst returns the embedded CollectionSpec for pickfirst.
func loadPickfirst() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_PickfirstBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load pickfirst: %w", err)
	}

	return spec, err
}

// loadPickfirstObjects loads pickfirst and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*pickfirstObjects
//	*pickfirstPrograms
//	*pickfirstMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadPickfirstObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadPickfirst()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// pickfirstSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type pickfirstSpecs struct {
	pickfirstProgramSpecs
	pickfirstMapSpecs
}

// pickfirstSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type pickfirstProgramSpecs struct {
	Pickfirst *ebpf.ProgramSpec `ebpf:"pickfirst"`
}

// pickfirstMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type pickfirstMapSpecs struct {
	TcpBalancingTargets *ebpf.MapSpec `ebpf:"tcp_balancing_targets"`
}

// pickfirstObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadPickfirstObjects or ebpf.CollectionSpec.LoadAndAssign.
type pickfirstObjects struct {
	pickfirstPrograms
	pickfirstMaps
}

func (o *pickfirstObjects) Close() error {
	return _PickfirstClose(
		&o.pickfirstPrograms,
		&o.pickfirstMaps,
	)
}

// pickfirstMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadPickfirstObjects or ebpf.CollectionSpec.LoadAndAssign.
type pickfirstMaps struct {
	TcpBalancingTargets *ebpf.Map `ebpf:"tcp_balancing_targets"`
}

func (m *pickfirstMaps) Close() error {
	return _PickfirstClose(
		m.TcpBalancingTargets,
	)
}

// pickfirstPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadPickfirstObjects or ebpf.CollectionSpec.LoadAndAssign.
type pickfirstPrograms struct {
	Pickfirst *ebpf.Program `ebpf:"pickfirst"`
}

func (p *pickfirstPrograms) Close() error {
	return _PickfirstClose(
		p.Pickfirst,
	)
}

func _PickfirstClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed pickfirst_bpfel.o
var _PickfirstBytes []byte
