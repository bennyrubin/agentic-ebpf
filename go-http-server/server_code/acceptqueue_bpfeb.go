// Code generated by bpf2go; DO NOT EDIT.
//go:build mips || mips64 || ppc64 || s390x

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type acceptqueueAcceptq struct {
	Curr uint32
	Max  uint32
	Cpu  uint32
}

// loadAcceptqueue returns the embedded CollectionSpec for acceptqueue.
func loadAcceptqueue() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_AcceptqueueBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load acceptqueue: %w", err)
	}

	return spec, err
}

// loadAcceptqueueObjects loads acceptqueue and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*acceptqueueObjects
//	*acceptqueuePrograms
//	*acceptqueueMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadAcceptqueueObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadAcceptqueue()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// acceptqueueSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type acceptqueueSpecs struct {
	acceptqueueProgramSpecs
	acceptqueueMapSpecs
}

// acceptqueueSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type acceptqueueProgramSpecs struct {
	AcceptqSelector *ebpf.ProgramSpec `ebpf:"acceptq_selector"`
}

// acceptqueueMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type acceptqueueMapSpecs struct {
	AcceptqMap          *ebpf.MapSpec `ebpf:"acceptq_map"`
	AcceptqSlotCookies  *ebpf.MapSpec `ebpf:"acceptq_slot_cookies"`
	TcpBalancingTargets *ebpf.MapSpec `ebpf:"tcp_balancing_targets"`
}

// acceptqueueObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadAcceptqueueObjects or ebpf.CollectionSpec.LoadAndAssign.
type acceptqueueObjects struct {
	acceptqueuePrograms
	acceptqueueMaps
}

func (o *acceptqueueObjects) Close() error {
	return _AcceptqueueClose(
		&o.acceptqueuePrograms,
		&o.acceptqueueMaps,
	)
}

// acceptqueueMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadAcceptqueueObjects or ebpf.CollectionSpec.LoadAndAssign.
type acceptqueueMaps struct {
	AcceptqMap          *ebpf.Map `ebpf:"acceptq_map"`
	AcceptqSlotCookies  *ebpf.Map `ebpf:"acceptq_slot_cookies"`
	TcpBalancingTargets *ebpf.Map `ebpf:"tcp_balancing_targets"`
}

func (m *acceptqueueMaps) Close() error {
	return _AcceptqueueClose(
		m.AcceptqMap,
		m.AcceptqSlotCookies,
		m.TcpBalancingTargets,
	)
}

// acceptqueuePrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadAcceptqueueObjects or ebpf.CollectionSpec.LoadAndAssign.
type acceptqueuePrograms struct {
	AcceptqSelector *ebpf.Program `ebpf:"acceptq_selector"`
}

func (p *acceptqueuePrograms) Close() error {
	return _AcceptqueueClose(
		p.AcceptqSelector,
	)
}

func _AcceptqueueClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed acceptqueue_bpfeb.o
var _AcceptqueueBytes []byte
