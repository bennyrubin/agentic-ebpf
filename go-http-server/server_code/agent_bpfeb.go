// Code generated by bpf2go; DO NOT EDIT.
//go:build mips || mips64 || ppc64 || s390x

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type agentAcceptq struct {
	Curr uint32
	Max  uint32
	Cpu  uint32
}

// loadAgent returns the embedded CollectionSpec for agent.
func loadAgent() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_AgentBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load agent: %w", err)
	}

	return spec, err
}

// loadAgentObjects loads agent and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*agentObjects
//	*agentPrograms
//	*agentMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadAgentObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadAgent()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// agentSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type agentSpecs struct {
	agentProgramSpecs
	agentMapSpecs
}

// agentSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type agentProgramSpecs struct {
	AgentSelector *ebpf.ProgramSpec `ebpf:"agent_selector"`
}

// agentMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type agentMapSpecs struct {
	AcceptqMap          *ebpf.MapSpec `ebpf:"acceptq_map"`
	AcceptqSlotCookies  *ebpf.MapSpec `ebpf:"acceptq_slot_cookies"`
	CpuUtilMap          *ebpf.MapSpec `ebpf:"cpu_util_map"`
	TcpBalancingTargets *ebpf.MapSpec `ebpf:"tcp_balancing_targets"`
}

// agentObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadAgentObjects or ebpf.CollectionSpec.LoadAndAssign.
type agentObjects struct {
	agentPrograms
	agentMaps
}

func (o *agentObjects) Close() error {
	return _AgentClose(
		&o.agentPrograms,
		&o.agentMaps,
	)
}

// agentMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadAgentObjects or ebpf.CollectionSpec.LoadAndAssign.
type agentMaps struct {
	AcceptqMap          *ebpf.Map `ebpf:"acceptq_map"`
	AcceptqSlotCookies  *ebpf.Map `ebpf:"acceptq_slot_cookies"`
	CpuUtilMap          *ebpf.Map `ebpf:"cpu_util_map"`
	TcpBalancingTargets *ebpf.Map `ebpf:"tcp_balancing_targets"`
}

func (m *agentMaps) Close() error {
	return _AgentClose(
		m.AcceptqMap,
		m.AcceptqSlotCookies,
		m.CpuUtilMap,
		m.TcpBalancingTargets,
	)
}

// agentPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadAgentObjects or ebpf.CollectionSpec.LoadAndAssign.
type agentPrograms struct {
	AgentSelector *ebpf.Program `ebpf:"agent_selector"`
}

func (p *agentPrograms) Close() error {
	return _AgentClose(
		p.AgentSelector,
	)
}

func _AgentClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed agent_bpfeb.o
var _AgentBytes []byte
