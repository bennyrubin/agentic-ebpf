// Code generated by bpf2go; DO NOT EDIT.
//go:build mips || mips64 || ppc64 || s390x

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadCpuutil returns the embedded CollectionSpec for cpuutil.
func loadCpuutil() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_CpuutilBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load cpuutil: %w", err)
	}

	return spec, err
}

// loadCpuutilObjects loads cpuutil and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*cpuutilObjects
//	*cpuutilPrograms
//	*cpuutilMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadCpuutilObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadCpuutil()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// cpuutilSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type cpuutilSpecs struct {
	cpuutilProgramSpecs
	cpuutilMapSpecs
}

// cpuutilSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type cpuutilProgramSpecs struct {
	CpuutilSelector *ebpf.ProgramSpec `ebpf:"cpuutil_selector"`
}

// cpuutilMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type cpuutilMapSpecs struct {
	CpuUtilMap          *ebpf.MapSpec `ebpf:"cpu_util_map"`
	TcpBalancingTargets *ebpf.MapSpec `ebpf:"tcp_balancing_targets"`
}

// cpuutilObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadCpuutilObjects or ebpf.CollectionSpec.LoadAndAssign.
type cpuutilObjects struct {
	cpuutilPrograms
	cpuutilMaps
}

func (o *cpuutilObjects) Close() error {
	return _CpuutilClose(
		&o.cpuutilPrograms,
		&o.cpuutilMaps,
	)
}

// cpuutilMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadCpuutilObjects or ebpf.CollectionSpec.LoadAndAssign.
type cpuutilMaps struct {
	CpuUtilMap          *ebpf.Map `ebpf:"cpu_util_map"`
	TcpBalancingTargets *ebpf.Map `ebpf:"tcp_balancing_targets"`
}

func (m *cpuutilMaps) Close() error {
	return _CpuutilClose(
		m.CpuUtilMap,
		m.TcpBalancingTargets,
	)
}

// cpuutilPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadCpuutilObjects or ebpf.CollectionSpec.LoadAndAssign.
type cpuutilPrograms struct {
	CpuutilSelector *ebpf.Program `ebpf:"cpuutil_selector"`
}

func (p *cpuutilPrograms) Close() error {
	return _CpuutilClose(
		p.CpuutilSelector,
	)
}

func _CpuutilClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed cpuutil_bpfeb.o
var _CpuutilBytes []byte
