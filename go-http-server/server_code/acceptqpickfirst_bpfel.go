// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type acceptqpickfirstAcceptq struct {
	Curr uint32
	Max  uint32
	Cpu  uint32
}

// loadAcceptqpickfirst returns the embedded CollectionSpec for acceptqpickfirst.
func loadAcceptqpickfirst() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_AcceptqpickfirstBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load acceptqpickfirst: %w", err)
	}

	return spec, err
}

// loadAcceptqpickfirstObjects loads acceptqpickfirst and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*acceptqpickfirstObjects
//	*acceptqpickfirstPrograms
//	*acceptqpickfirstMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadAcceptqpickfirstObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadAcceptqpickfirst()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// acceptqpickfirstSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type acceptqpickfirstSpecs struct {
	acceptqpickfirstProgramSpecs
	acceptqpickfirstMapSpecs
}

// acceptqpickfirstSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type acceptqpickfirstProgramSpecs struct {
	AcceptqPickfirstSelector *ebpf.ProgramSpec `ebpf:"acceptq_pickfirst_selector"`
}

// acceptqpickfirstMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type acceptqpickfirstMapSpecs struct {
	AcceptqMap          *ebpf.MapSpec `ebpf:"acceptq_map"`
	AcceptqSlotCookies  *ebpf.MapSpec `ebpf:"acceptq_slot_cookies"`
	CpuUtilMap          *ebpf.MapSpec `ebpf:"cpu_util_map"`
	TcpBalancingTargets *ebpf.MapSpec `ebpf:"tcp_balancing_targets"`
}

// acceptqpickfirstObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadAcceptqpickfirstObjects or ebpf.CollectionSpec.LoadAndAssign.
type acceptqpickfirstObjects struct {
	acceptqpickfirstPrograms
	acceptqpickfirstMaps
}

func (o *acceptqpickfirstObjects) Close() error {
	return _AcceptqpickfirstClose(
		&o.acceptqpickfirstPrograms,
		&o.acceptqpickfirstMaps,
	)
}

// acceptqpickfirstMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadAcceptqpickfirstObjects or ebpf.CollectionSpec.LoadAndAssign.
type acceptqpickfirstMaps struct {
	AcceptqMap          *ebpf.Map `ebpf:"acceptq_map"`
	AcceptqSlotCookies  *ebpf.Map `ebpf:"acceptq_slot_cookies"`
	CpuUtilMap          *ebpf.Map `ebpf:"cpu_util_map"`
	TcpBalancingTargets *ebpf.Map `ebpf:"tcp_balancing_targets"`
}

func (m *acceptqpickfirstMaps) Close() error {
	return _AcceptqpickfirstClose(
		m.AcceptqMap,
		m.AcceptqSlotCookies,
		m.CpuUtilMap,
		m.TcpBalancingTargets,
	)
}

// acceptqpickfirstPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadAcceptqpickfirstObjects or ebpf.CollectionSpec.LoadAndAssign.
type acceptqpickfirstPrograms struct {
	AcceptqPickfirstSelector *ebpf.Program `ebpf:"acceptq_pickfirst_selector"`
}

func (p *acceptqpickfirstPrograms) Close() error {
	return _AcceptqpickfirstClose(
		p.AcceptqPickfirstSelector,
	)
}

func _AcceptqpickfirstClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed acceptqpickfirst_bpfel.o
var _AcceptqpickfirstBytes []byte
