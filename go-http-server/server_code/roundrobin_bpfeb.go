// Code generated by bpf2go; DO NOT EDIT.
//go:build mips || mips64 || ppc64 || s390x

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type roundrobinRrState struct {
	Lock    struct{ Val uint32 }
	Counter uint32
}

// loadRoundrobin returns the embedded CollectionSpec for roundrobin.
func loadRoundrobin() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_RoundrobinBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load roundrobin: %w", err)
	}

	return spec, err
}

// loadRoundrobinObjects loads roundrobin and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*roundrobinObjects
//	*roundrobinPrograms
//	*roundrobinMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadRoundrobinObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadRoundrobin()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// roundrobinSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type roundrobinSpecs struct {
	roundrobinProgramSpecs
	roundrobinMapSpecs
}

// roundrobinSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type roundrobinProgramSpecs struct {
	RrSelector *ebpf.ProgramSpec `ebpf:"rr_selector"`
}

// roundrobinMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type roundrobinMapSpecs struct {
	Rr                  *ebpf.MapSpec `ebpf:"rr"`
	TcpBalancingTargets *ebpf.MapSpec `ebpf:"tcp_balancing_targets"`
}

// roundrobinObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadRoundrobinObjects or ebpf.CollectionSpec.LoadAndAssign.
type roundrobinObjects struct {
	roundrobinPrograms
	roundrobinMaps
}

func (o *roundrobinObjects) Close() error {
	return _RoundrobinClose(
		&o.roundrobinPrograms,
		&o.roundrobinMaps,
	)
}

// roundrobinMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadRoundrobinObjects or ebpf.CollectionSpec.LoadAndAssign.
type roundrobinMaps struct {
	Rr                  *ebpf.Map `ebpf:"rr"`
	TcpBalancingTargets *ebpf.Map `ebpf:"tcp_balancing_targets"`
}

func (m *roundrobinMaps) Close() error {
	return _RoundrobinClose(
		m.Rr,
		m.TcpBalancingTargets,
	)
}

// roundrobinPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadRoundrobinObjects or ebpf.CollectionSpec.LoadAndAssign.
type roundrobinPrograms struct {
	RrSelector *ebpf.Program `ebpf:"rr_selector"`
}

func (p *roundrobinPrograms) Close() error {
	return _RoundrobinClose(
		p.RrSelector,
	)
}

func _RoundrobinClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed roundrobin_bpfeb.o
var _RoundrobinBytes []byte
